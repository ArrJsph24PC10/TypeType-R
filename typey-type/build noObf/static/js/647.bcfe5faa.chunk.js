"use strict";
(self["webpackChunktypey_type"] = self["webpackChunktypey_type"] || []).push([[647],{

/***/ 647:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": () => (/* binding */ dictionaries_DictionaryManagement)
});

// EXTERNAL MODULE: ./node_modules/@sentry/minimal/esm/index.js + 1 modules
var esm = __webpack_require__(2226);
// EXTERNAL MODULE: ./src/constant/latestPloverDictName.ts
var latestPloverDictName = __webpack_require__(8753);
// EXTERNAL MODULE: ./src/constant/sourceNamespaces.ts
var sourceNamespaces = __webpack_require__(9742);
// EXTERNAL MODULE: ./node_modules/react/index.js
var react = __webpack_require__(2483);
// EXTERNAL MODULE: ./node_modules/react-document-title/index.js
var react_document_title = __webpack_require__(5556);
var react_document_title_default = /*#__PURE__*/__webpack_require__.n(react_document_title);
// EXTERNAL MODULE: ./node_modules/react-ga4/dist/index.js
var dist = __webpack_require__(3071);
// EXTERNAL MODULE: ./src/components/Icons/icon-images/ClosingCross.svg
var ClosingCross = __webpack_require__(2823);
// EXTERNAL MODULE: ./src/components/Icons/Icon.tsx
var Icon = __webpack_require__(5135);
// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js
var jsx_runtime = __webpack_require__(6723);
;// ./src/components/Notification.tsx
const Notification=_ref=>{let{onDismiss,children}=_ref;const[showNotification,setShowNotification]=(0,react.useState)(true);(0,react.useEffect)(()=>{if(!showNotification&&onDismiss){onDismiss();}},[showNotification,onDismiss]);function handleDismiss(){setShowNotification(false);}return/*#__PURE__*/(0,jsx_runtime.jsx)("div",{children:showNotification?/*#__PURE__*/(0,jsx_runtime.jsxs)("div",{className:"notification notification--global fixed w-100 flex wrap justify-between pa1 p1 p3 pa3 items-center bg-danger dark:text-coolgrey-900",children:[/*#__PURE__*/(0,jsx_runtime.jsx)("div",{className:"notification__message",children:children}),/*#__PURE__*/(0,jsx_runtime.jsx)("button",{className:"de-emphasized-button flex items-center justify-center p1","aria-label":"Dismiss notification",onClick:handleDismiss.bind(undefined),children:/*#__PURE__*/(0,jsx_runtime.jsx)(Icon/* default */.A,{iconSVGImport:ClosingCross/* default */.A,width:"1em",height:"1em"})})]}):null});};/* harmony default export */ const components_Notification = (Notification);
// EXTERNAL MODULE: ./src/utils/transformingDictionaries/transformingDictionaries.ts
var transformingDictionaries = __webpack_require__(4649);
// EXTERNAL MODULE: ./src/components/PseudoContentButton.tsx
var PseudoContentButton = __webpack_require__(3008);
// EXTERNAL MODULE: ./src/utils/typey-type.js
var typey_type = __webpack_require__(9502);
// EXTERNAL MODULE: ./typey-type-data/dictionaries/didoesdigital/misstrokes.json
var misstrokes = __webpack_require__(1438);
// EXTERNAL MODULE: ./src/components/Subheader.tsx
var Subheader = __webpack_require__(7532);
// EXTERNAL MODULE: ./src/components/Announcer/useAnnouncer.tsx
var useAnnouncer = __webpack_require__(483);
// EXTERNAL MODULE: ./node_modules/jotai/esm/react.mjs
var esm_react = __webpack_require__(2976);
// EXTERNAL MODULE: ./src/states/globalUserSettingsState.ts
var globalUserSettingsState = __webpack_require__(3187);
;// ./src/pages/dictionaries/DictionaryManagement.jsx
// type Props = {
//   fetchAndSetupGlobalDict
//   globalLookupDictionary
//   globalUserSettings.experiments?.stenohintsonthefly
//   toggleExperiment
//   updatePersonalDictionaries
// }
// From an older version of Plover
// https://github.com/openstenoproject/plover/commit/1bfc3b3eb04ad7bf8b74d8d236174255b5382925#diff-ec83a43e05da03d0e1df2dce12cad3ebb30e8fad3d0ddab6243951e15f6b102b
const invalidEntries={"11/*T":"11th","E*/PHRAOUR/PWUS/KWRAOU/TPHUPL":"e pluribus unum","E*/PHRAOUR/PWUS/KWRAOUPB":"e pluribus unum","E*/PHRAOUR/PWUS/KWRAOUPB/UPL":"e pluribus unum","SEPB/*AT":"sensate","SWA/HAOEL/LAOE":"Swahili","WEUBG/*APB":"Wiccan"};const DictionaryManagement=props=>{var _globalUserSettings$e;const globalUserSettings=(0,esm_react/* useAtomValue */.md)(globalUserSettingsState/* globalUserSettingsState */.tq);const mainHeading=(0,react.useRef)(null);// const mainHeading = useRef<HTMLHeadingElement>(null);
const{updateMessage}=(0,useAnnouncer/* useAnnouncerApi */.b)();const[misstrokesInDictionaries,setMisstrokesInDictionaries]=(0,react.useState)(null);const[importedDictionariesLoaded,setImportedDictionariesLoaded]=(0,react.useState)(false);const[importedDictionariesLoading,setImportedDictionariesLoading]=(0,react.useState)(false);const[dictionaryErrorNotification,setDictionaryErrorNotification]=(0,react.useState)(null);const[dictionariesTypeyTypeWillUseState,setDictionariesTypeyTypeWillUseState]=(0,react.useState)([]);const[validDictionariesState,setValidDictionariesState]=(0,react.useState)([]);const[invalidDictionariesState,setInvalidDictionariesState]=(0,react.useState)([]);const[namesOfValidImportedDictionariesState,setNamesOfValidImportedDictionariesState]=(0,react.useState)([]);const[validDictionariesListedInConfigState,setValidDictionariesListedInConfigState]=(0,react.useState)([]);const[validConfig,setValidConfig]=(0,react.useState)("");const[invalidConfig,setInvalidConfig]=(0,react.useState)([]);const globalDict=props.globalLookupDictionary;(0,react.useEffect)(()=>{var _mainHeading$current;// @ts-ignore FIXME: remove this in TSX
(_mainHeading$current=mainHeading.current)===null||_mainHeading$current===void 0?void 0:_mainHeading$current.focus();let config=[];if(globalDict&&globalDict["configuration"]){config=globalDict["configuration"].filter(dictName=>dictName.startsWith(sourceNamespaces/* default */.A.get("user")+":")).map(dictName=>dictName.replace(/^.+:/,""));}setDictionariesTypeyTypeWillUseState(config);},[globalDict]);// maxSelectFile(event) {
//   let files = event.target.files // create file object
//   if (files.length > 3) {
//     const msg = 'Only 3 images can be uploaded at a time'
//     event.target.value = null // discard selected file
//     console.log(msg)
//     return false;
//   }
//   return true;
// }
function validateDictionaries(files){let validDictionaries=validDictionariesState.slice();let invalidDictionaries=[];let filesLength=files.length;if(filesLength===0){setValidDictionariesState(validDictionaries);setInvalidDictionariesState([["No dictionary","Choose a dictionary file to import."]]);}else{let misstrokesInDictionaries=[];for(let i=0;i<filesLength;++i){let dictionary=files[i];let dictName=dictionary.name;const reader=new FileReader();reader.onload=event=>{let text=event.target.result;try{if(dictionary.size>25000000){throw new Error("This file is too big (>25MB).");}if(!dictionary.type.startsWith("application/json")){throw new Error("This is not a JSON file.");}if(validDictionariesState.map(d=>d[0]).includes(dictName)){throw new Error("This dictionary name conflicts with an existing dictionary. You may have imported it already.");}if(dictName==="typey-type.json"&&dictionary.size>=2144740){throw new Error("This dictionary looks like a copy of Typey Type's so we'll exclude it for now.");}if(dictName===latestPloverDictName/* default */.A||dictName==="main.json"&&dictionary.size>4000){throw new Error("This dictionary looks like a copy of Plover's latest dictionary so we'll exclude it for now.");}let parsedDictionary=JSON.parse(text);if(parsedDictionary.constructor!=={}.constructor){throw new Error("This JSON does not contain an object.");}let parsedDictionaryEntries=Object.entries(parsedDictionary);if(parsedDictionaryEntries.length<1){throw new Error("This dictionary is empty.");}let probableMisstrokes=[];let parsedDictionaryEntriesLength=parsedDictionaryEntries.length;for(let i=0;i<parsedDictionaryEntriesLength;++i){let[outline,translation]=parsedDictionaryEntries[i];let invalidStenoOutline=outline.match(/[^#STKPWHRAO*-EUFRPBLGTSDZ/]/);if(invalidStenoOutline!==null){let maxLength=50;let trimmedInvalidStenoOutline=outline.length>maxLength?outline.substring(0,maxLength-3)+"…":outline.substring(0,maxLength);throw new Error(`${dictName} contains invalid steno outlines, such as: ${trimmedInvalidStenoOutline}`);}if(misstrokes[outline]&&misstrokes[outline]===translation){probableMisstrokes.push([outline,translation]);}if(invalidEntries[outline]&&invalidEntries[outline]===translation){probableMisstrokes.push([outline,translation]);}}if(parsedDictionary&&typeof parsedDictionary==="object"){validDictionaries.push([dictName,parsedDictionary]);}if(probableMisstrokes.length>0){misstrokesInDictionaries.push({name:dictName,probableMisstrokes:probableMisstrokes});}}catch(error){invalidDictionaries.push([dictName,error.message]);}const namesOfValidImportedDictionaries=validDictionaries.map(dictionary=>{return dictionary[0];});let dictionariesTypeyTypeWillUse=(0,transformingDictionaries/* getListOfValidDictionariesAddedAndInConfig */.Q6)(validDictionariesListedInConfigState,namesOfValidImportedDictionaries);setDictionariesTypeyTypeWillUseState(dictionariesTypeyTypeWillUse);setNamesOfValidImportedDictionariesState(namesOfValidImportedDictionaries);setValidDictionariesState(validDictionaries);setInvalidDictionariesState(invalidDictionaries);};reader.readAsText(dictionary);}setMisstrokesInDictionaries(misstrokesInDictionaries);}}function validateConfig(files){let validConfig="";let validDictionariesListedInConfig=[];let invalidConfig=[];let filesLength=files.length;if(filesLength>1){setValidConfig(validConfig);setInvalidConfig(["Too many files","Choose one config file."]);}else if(filesLength!==1){setValidConfig(validConfig);setInvalidConfig(["No config file","Choose a config file to import."]);}else if(!files[0].name.endsWith(".cfg")){setValidConfig(validConfig);setInvalidConfig(["Incorrect file type","The file name must end in “.cfg”."]);}else{let dictionaryConfig=files[0];let configName=dictionaryConfig.name;const reader=new FileReader();reader.onload=event=>{let text=event.target.result;try{let lines=text.split("\n");let linesLength=lines.length;let parsedConfig="";for(let i=0;i<linesLength;++i){if(lines[i].startsWith("dictionaries = ")){parsedConfig=JSON.parse(lines[i].replace("dictionaries = ",""));}}if(!parsedConfig){throw new Error("This file has no list of dictionaries.");}let parsedConfigLength=parsedConfig.length;for(let i=0;i<parsedConfigLength;++i){if(parsedConfig[i].hasOwnProperty("enabled")&&parsedConfig[i].hasOwnProperty("path")){if(parsedConfig[i]["enabled"]){let filename=parsedConfig[i]["path"].split("\\").pop().split("/").pop();if(filename.endsWith(".json")){validDictionariesListedInConfig.push(filename);}else if(filename.endsWith(".py"||0)){// Skip valid, but unhandled dictionary formats
}else{debugger;throw new Error(`This doesn't look like a valid dictionary filename: ${filename.slice(0,50)}.`);}}}else{throw new Error("The list of dictionaries has no enabled dictionary paths.");}}if(validDictionariesListedInConfig.length===0){throw new Error("There were no valid JSON dictionaries found enabled in this config.");}validConfig=configName;}catch(error){invalidConfig=[configName,error.message];}let dictionariesTypeyTypeWillUse=(0,transformingDictionaries/* getListOfValidDictionariesAddedAndInConfig */.Q6)(validDictionariesListedInConfig,namesOfValidImportedDictionariesState);setDictionariesTypeyTypeWillUseState(dictionariesTypeyTypeWillUse);setValidConfig(validConfig);setValidDictionariesListedInConfigState(validDictionariesListedInConfig);setInvalidConfig(invalidConfig);};reader.readAsText(dictionaryConfig);}}function handleOnSubmit(event){event.preventDefault();setImportedDictionariesLoaded(false);setImportedDictionariesLoading(false);const filesInput=document.querySelector("#dictionariesFileInput");const files=filesInput.files;let labelString="No files for dictionaries";if(files&&files.length>0){let fileNames=[];for(let i=0;i<files.length;i++){fileNames.push(files[i].name);}labelString=fileNames.join(", ");}dist/* default */.Ay.event({category:"Dictionary management",action:"Add dictionaries",label:labelString});validateDictionaries(files);}function handleOnSubmitConfig(event){event.preventDefault();setImportedDictionariesLoaded(false);setImportedDictionariesLoading(false);const filesInput=document.querySelector("#dictionaryConfigFileInput");const files=filesInput.files;let labelString="No files for config";if(files&&files.length>0){let fileNames=[];for(let i=0;i<files.length;i++){fileNames.push(files[i].name);}labelString=fileNames.join(", ");}dist/* default */.Ay.event({category:"Dictionary management",action:"Add config",label:labelString});validateConfig(files);}function handleOnSubmitClear(event){event.preventDefault();let writeDictionariesError=(0,typey_type/* writePersonalPreferences */.iJ)("personalDictionaries",[]);if(writeDictionariesError){console.log(writeDictionariesError);if(writeDictionariesError.error){esm/* captureException */.Cp(writeDictionariesError.error);esm/* captureMessage */.wd("Write dictionaries error… "+writeDictionariesError.message,"debug");}}else{updateMessage("Applied!");}setImportedDictionariesLoading(false);setDictionaryErrorNotification(null);setDictionariesTypeyTypeWillUseState([]);setValidDictionariesState([]);setInvalidDictionariesState([]);setNamesOfValidImportedDictionariesState([]);setValidDictionariesListedInConfigState([]);setValidConfig("");setInvalidConfig([]);dist/* default */.Ay.event({category:"Dictionary management",action:"Clear dictionaries and config",label:"Clear all"});}function handleOnSubmitApplyChanges(event){event.preventDefault();setImportedDictionariesLoaded(false);setImportedDictionariesLoading(true);let configOrder=validDictionariesListedInConfigState;let sortedValidDictionaries=validDictionariesState.slice(0);sortedValidDictionaries=sortedValidDictionaries.sort((a,b)=>{// dictionaries that don't appear in config will be before dictionaries that do
return configOrder.indexOf(a[0])-configOrder.indexOf(b[0]);});// First, update state
props.updatePersonalDictionaries({dictionariesNamesAndContents:sortedValidDictionaries});let personalDictionariesToStoreInV1Format={v:"1",dicts:validDictionariesState};// Second, update local storage
let writeDictionariesError=(0,typey_type/* writePersonalPreferences */.iJ)("personalDictionaries",personalDictionariesToStoreInV1Format);if(writeDictionariesError){showDictionaryErrorNotification(writeDictionariesError.name);if(writeDictionariesError.error){esm/* captureException */.Cp(writeDictionariesError.error);esm/* captureMessage */.wd("Write dictionaries error… "+writeDictionariesError.message,"debug");}}let dictionariesTypeyTypeWillUse=dictionariesTypeyTypeWillUseState;let labelString=dictionariesTypeyTypeWillUse||"No files for config";dist/* default */.Ay.event({category:"Apply dictionary changes",action:"Click apply button",label:labelString});const personalDictionaries={dictionariesNamesAndContents:validDictionariesState};props.fetchAndSetupGlobalDict(true,personalDictionaries).then(()=>{setImportedDictionariesLoaded(true);setImportedDictionariesLoading(false);}).catch(error=>{console.error(error);showDictionaryErrorNotification("FetchAndSetupGlobalDictFailed");setImportedDictionariesLoaded(false);setImportedDictionariesLoading(false);});}function showDictionaryErrorNotification(name){updateMessage("Unable to save dictionaries. See the message at the top of the page for more details.");setDictionaryErrorNotification(name||null);}function dismissDictionaryErrorNotification(){updateMessage("");setDictionaryErrorNotification(null);}let dictionariesTypeyTypeWillUse=dictionariesTypeyTypeWillUseState.map((dictionary,index)=>{return/*#__PURE__*/(0,jsx_runtime.jsx)("li",{children:dictionary},index);});const whyMisstrokes=/*#__PURE__*/(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:/*#__PURE__*/(0,jsx_runtime.jsxs)("details",{children:[/*#__PURE__*/(0,jsx_runtime.jsx)("summary",{children:/*#__PURE__*/(0,jsx_runtime.jsx)("p",{children:"To see better stroke hints, you might move any misstrokes out of your main dictionaries into a separate misstrokes autocorrect dictionary and exclude it from Typey\xA0Type."})}),/*#__PURE__*/(0,jsx_runtime.jsx)("p",{children:"Misstrokes are extra entries that use similar keys to produce the word you meant to write. If you regularly mistype a word, you might add a misstroke entry for the keys you are incorrectly pressing so that your dictionaries effectively autocorrects your mistakes. This is great for increasing the accuracy of your output."}),/*#__PURE__*/(0,jsx_runtime.jsxs)("p",{children:["While you're learning steno theory, it can be difficult to recognise misstrokes. It might then take longer to learn the theory and develop intuition about what strokes to use for longer words and variations. For example, if you use the misstroke"," ",/*#__PURE__*/(0,jsx_runtime.jsx)("span",{className:"steno-stroke",children:"SPHAOEU"})," to write \u201Csupply\u201D, which is missing the left-hand ",/*#__PURE__*/(0,jsx_runtime.jsx)("span",{className:"steno-stroke",children:"R"})," key from the usual outline ",/*#__PURE__*/(0,jsx_runtime.jsx)("span",{className:"steno-stroke",children:"SPHRAOEU"}),", it might take you longer to work out the brief"," ",/*#__PURE__*/(0,jsx_runtime.jsx)("span",{className:"steno-stroke",children:"SPHRAOEUG"})," for \u201Csupplying\u201D or"," ",/*#__PURE__*/(0,jsx_runtime.jsx)("span",{className:"steno-stroke",children:"SPWHRAOEU"})," for \u201Cblood\xA0supply\u201D."]})]})});let misstrokesBlurb=(misstrokesInDictionaries===null||misstrokesInDictionaries===void 0?void 0:misstrokesInDictionaries.length)>0?/*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[/*#__PURE__*/(0,jsx_runtime.jsx)("p",{children:"Your dictionaries contain entries that might be misstrokes or bad habits:"}),/*#__PURE__*/(0,jsx_runtime.jsx)("ul",{children:misstrokesInDictionaries.map((dict,dictIndex)=>{const probableMisstrokes=dict.probableMisstrokes.map((entry,misstrokeIndex)=>/*#__PURE__*/(0,jsx_runtime.jsxs)("li",{className:"bg-warning wrap",children:["\"",entry[0],"\": \"",entry[1],"\""]},misstrokeIndex));return/*#__PURE__*/(0,jsx_runtime.jsxs)("li",{children:[dict.name,":",/*#__PURE__*/(0,jsx_runtime.jsx)("ul",{children:probableMisstrokes})]},dictIndex);})}),whyMisstrokes]}):whyMisstrokes;let showYourDictionaries=/*#__PURE__*/(0,jsx_runtime.jsx)("p",{children:"You can import your dictionaries and your dictionary config to look up briefs using your own dictionaries."});let showYourConfig=null;let showDictionaryErrors=null;let showConfigErrors=null;const validDictionaryList=validDictionariesState.map((dictionary,index,array)=>{return/*#__PURE__*/(0,jsx_runtime.jsx)("li",{children:dictionary[0]},index);});const invalidDictionaryList=invalidDictionariesState.map((dictionary,index,array)=>{return/*#__PURE__*/(0,jsx_runtime.jsxs)("li",{children:[dictionary[0],": ",dictionary[1]]},index);});const namesOfValidImportedDictionaries=namesOfValidImportedDictionariesState;const validDictionariesListedInConfig=validDictionariesListedInConfigState.map((dictionary,index,array)=>{let className="";if(namesOfValidImportedDictionaries.indexOf(dictionary)>-1){className="unstyled-list-item";}else{className="unstyled-list-item bg-danger dark:text-coolgrey-900";}return/*#__PURE__*/(0,jsx_runtime.jsx)("li",{className:className,children:dictionary},index);});if(validDictionariesState&&validDictionariesState.length>0){showYourDictionaries=/*#__PURE__*/(0,jsx_runtime.jsxs)(react.Fragment,{children:[validDictionariesState.length===1?/*#__PURE__*/(0,jsx_runtime.jsx)("p",{children:"Your added dictionary:"}):/*#__PURE__*/(0,jsx_runtime.jsx)("p",{children:"Your added dictionaries:"}),/*#__PURE__*/(0,jsx_runtime.jsx)("ul",{className:"wrap",children:validDictionaryList})]});}if(invalidDictionariesState&&invalidDictionariesState.length>0){showDictionaryErrors=/*#__PURE__*/(0,jsx_runtime.jsxs)(react.Fragment,{children:[invalidDictionariesState.length===1?/*#__PURE__*/(0,jsx_runtime.jsx)("p",{children:"This dictionary is invalid:"}):/*#__PURE__*/(0,jsx_runtime.jsx)("p",{children:"These dictionaries are invalid:"}),/*#__PURE__*/(0,jsx_runtime.jsx)("ul",{className:"bg-danger dark:text-coolgrey-900 pl1 pr3 wrap",children:invalidDictionaryList})]});}if(validConfig&&validConfig.length>4){// '.cfg' is 4 characters
showYourConfig=/*#__PURE__*/(0,jsx_runtime.jsxs)(react.Fragment,{children:[/*#__PURE__*/(0,jsx_runtime.jsxs)("p",{className:"wrap",children:["Your added dictionary config (",validConfig,") contains these dictionaries:"]}),/*#__PURE__*/(0,jsx_runtime.jsx)("ul",{className:"wrap unstyled-list",children:validDictionariesListedInConfig})]});}if(invalidConfig&&invalidConfig.length===2){showConfigErrors=/*#__PURE__*/(0,jsx_runtime.jsxs)(react.Fragment,{children:[/*#__PURE__*/(0,jsx_runtime.jsx)("p",{children:"This dictionary config is invalid:"}),/*#__PURE__*/(0,jsx_runtime.jsxs)("p",{className:"bg-danger dark:text-coolgrey-900 pl1 pr3 wrap",children:[invalidConfig[0],": ",invalidConfig[1]]})]});}let notificationBody;switch(dictionaryErrorNotification){case"AddToStorageFailed":notificationBody=/*#__PURE__*/(0,jsx_runtime.jsxs)("p",{children:["Your local storage is full so your dictionaries won't fit. Typey\xA0Type will still use them today but the next time you visit, you\u2019ll have to add your dictionaries again. For help, email"," ",/*#__PURE__*/(0,jsx_runtime.jsx)("a",{href:"mailto:typeytype@didoesdigital.com",target:"_blank",rel:"noopener noreferrer",children:"typeytype@didoesdigital.com"})]});break;case"WriteToStorageFailed":notificationBody=/*#__PURE__*/(0,jsx_runtime.jsx)("p",{children:"Typey\xA0Type couldn\u2019t update your local storage. Check your settings. It might also be full. Any changes to personal preferences and progress will be lost."});break;case"NoLocalStorage":notificationBody=/*#__PURE__*/(0,jsx_runtime.jsx)("p",{children:"Local storage is unavailable. Check your settings and permissions or try another browser. Changes to personal preferences and progress will be lost."});break;case"FetchAndSetupGlobalDictFailed":notificationBody=/*#__PURE__*/(0,jsx_runtime.jsxs)("p",{children:["Typey\xA0Type couldn\u2019t set up a global dictionary using your personal dictionaries. For help, email"," ",/*#__PURE__*/(0,jsx_runtime.jsx)("a",{href:"mailto:typeytype@didoesdigital.com",target:"_blank",rel:"noopener noreferrer",children:"typeytype@didoesdigital.com"})]});break;default:notificationBody="";break;}return/*#__PURE__*/(0,jsx_runtime.jsx)((react_document_title_default()),{title:"Typey Type | Dictionary management",children:/*#__PURE__*/(0,jsx_runtime.jsxs)("main",{id:"main",children:[dictionaryErrorNotification?/*#__PURE__*/(0,jsx_runtime.jsx)(components_Notification,{onDismiss:dismissDictionaryErrorNotification.bind(undefined),children:notificationBody}):null,/*#__PURE__*/(0,jsx_runtime.jsx)(Subheader/* default */.A,{children:/*#__PURE__*/(0,jsx_runtime.jsx)("div",{className:"flex mr1 self-center",children:/*#__PURE__*/(0,jsx_runtime.jsx)("header",{className:"flex items-center min-h-40",children:/*#__PURE__*/(0,jsx_runtime.jsx)("h2",{className:"table-cell mr2",ref:mainHeading,tabIndex:-1,children:"Dictionary management"})})})}),/*#__PURE__*/(0,jsx_runtime.jsx)("div",{className:"bg-info dark:bg-coolgrey-1100 landing-page-section",children:/*#__PURE__*/(0,jsx_runtime.jsxs)("div",{className:"p3 mx-auto mw-1024",children:[/*#__PURE__*/(0,jsx_runtime.jsx)("h3",{children:"Dictionary management experiment"}),/*#__PURE__*/(0,jsx_runtime.jsxs)("details",{children:[/*#__PURE__*/(0,jsx_runtime.jsx)("summary",{children:/*#__PURE__*/(0,jsx_runtime.jsxs)("p",{children:[/*#__PURE__*/(0,jsx_runtime.jsx)("span",{className:"bg-danger dark:text-coolgrey-900",children:"This feature is experimental!"})," ","There are some known limitations, such as the size limit. Expand to learn more\u2026"]})}),/*#__PURE__*/(0,jsx_runtime.jsxs)("ul",{children:[/*#__PURE__*/(0,jsx_runtime.jsx)("li",{children:"Local storage typically only holds about 5MB of data. If you have a bigger dictionary, you'll have to add it again on every visit."}),/*#__PURE__*/(0,jsx_runtime.jsxs)("li",{children:["You cannot use duplicate dictionary names e.g. if you have"," ",/*#__PURE__*/(0,jsx_runtime.jsx)("code",{children:"../good/dict.json"})," and"," ",/*#__PURE__*/(0,jsx_runtime.jsx)("code",{children:"../bad/dict.json"}),", Typey\xA0Type will see them both as ",/*#__PURE__*/(0,jsx_runtime.jsx)("code",{children:"dict.json"})," and panic."]}),/*#__PURE__*/(0,jsx_runtime.jsx)("li",{children:"This only works with JSON files. You cannot add Python or RTF dictionaries."}),/*#__PURE__*/(0,jsx_runtime.jsx)("li",{children:"This only works with Plover config files. This config file may decide the order of dictionaries for overwriting entries."}),/*#__PURE__*/(0,jsx_runtime.jsx)("li",{children:"This assumes you're using a newer version of Plover where the config file is in a certain format and the most important dictionary appears first."}),/*#__PURE__*/(0,jsx_runtime.jsx)("li",{children:"If you add multiple dictionaries with the same steno outline (JSON key) with different translations (JSON values), Typey\xA0Type will happily show the same outline as a hint for each of the words (or phrases), even though your configuration would prevent using both."}),/*#__PURE__*/(0,jsx_runtime.jsx)("li",{children:"The Writer feature will ignore your personal dictionaries entirely and show only Typey\xA0Type translations."}),/*#__PURE__*/(0,jsx_runtime.jsx)("li",{children:"This will probably do weird things with steno layouts other than the American (Ward Stone Ireland) layout and possibly with non-Plover theory punctuation."})]})]}),/*#__PURE__*/(0,jsx_runtime.jsx)("p",{children:"Typey\xA0Type does not upload personal dictionaries anywhere. Your dictionaries stay on your device. Dictionary names (but not their contents) may be sent to Google Analytics."}),/*#__PURE__*/(0,jsx_runtime.jsxs)("div",{className:"block relative p1",children:[/*#__PURE__*/(0,jsx_runtime.jsxs)("label",{className:"checkbox-label mb1",children:[/*#__PURE__*/(0,jsx_runtime.jsx)("input",{className:"checkbox-input mr1",type:"checkbox",name:"stenohintsonthefly",id:"stenohintsonthefly",checked:!!(globalUserSettings!==null&&globalUserSettings!==void 0&&(_globalUserSettings$e=globalUserSettings.experiments)!==null&&_globalUserSettings$e!==void 0&&_globalUserSettings$e.stenohintsonthefly),onChange:props.toggleExperiment}),/*#__PURE__*/(0,jsx_runtime.jsxs)("strong",{children:["Show your dictionary entries in lesson hints"," ",/*#__PURE__*/(0,jsx_runtime.jsx)("span",{className:"bg-danger dark:text-coolgrey-900",children:"(this is experimental with known limitations!)"})]})]}),/*#__PURE__*/(0,jsx_runtime.jsxs)("ul",{className:"ml3",children:[/*#__PURE__*/(0,jsx_runtime.jsx)("li",{children:"Typey\xA0Type will still use its own stroke hints for lessons with \u201Cphrasing\u201D, \u201Cprefixes\u201D, \u201Csuffixes\u201D, \u201Csteno-party-tricks\u201D, or \u201Ccollections/tech\u201D in the URL."}),/*#__PURE__*/(0,jsx_runtime.jsx)("li",{children:"There are weird cases where Typey\xA0Type will show its own strokes for certain combinations of punctuation."}),/*#__PURE__*/(0,jsx_runtime.jsxs)("li",{children:["You may see"," ",/*#__PURE__*/(0,jsx_runtime.jsx)("span",{className:"steno-stroke steno-stroke--subtle",children:"EU"})," ","or"," ",/*#__PURE__*/(0,jsx_runtime.jsx)("span",{className:"steno-stroke steno-stroke--subtle",children:"*EUP"})," ","shown for \u201CI\u201D instead of"," ",/*#__PURE__*/(0,jsx_runtime.jsx)("span",{className:"steno-stroke steno-stroke--subtle",children:"1-R"})," ","in the Roman Numerals lesson and similar quirks."]})]})]})]})}),/*#__PURE__*/(0,jsx_runtime.jsx)("div",{className:"bg-white dark:bg-coolgrey-1000 landing-page-section",children:/*#__PURE__*/(0,jsx_runtime.jsx)("div",{className:"p3 mx-auto mw-1024 flex flex-wrap",children:/*#__PURE__*/(0,jsx_runtime.jsxs)("div",{className:"mw-568 mr3 flex-grow",children:[/*#__PURE__*/(0,jsx_runtime.jsx)("h3",{children:"Dictionaries used for lookup"}),props.globalLookupDictionary&&props.globalLookupDictionary["configuration"]?/*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[/*#__PURE__*/(0,jsx_runtime.jsx)("p",{children:"Typey\xA0Type will use these dictionaries for brief hints:"}),/*#__PURE__*/(0,jsx_runtime.jsxs)("ul",{children:[/*#__PURE__*/(0,jsx_runtime.jsx)("li",{children:"Typey Type's dictionaries"}),dictionariesTypeyTypeWillUse,/*#__PURE__*/(0,jsx_runtime.jsx)("li",{children:"\u2026\xA0and for Lookup, Plover's latest dictionary too"})]})]}):/*#__PURE__*/(0,jsx_runtime.jsx)("p",{children:"No dictionaries have been loaded yet because this page doesn't need to show any strokes."}),/*#__PURE__*/(0,jsx_runtime.jsx)("form",{className:"mb3",onSubmit:handleOnSubmitApplyChanges.bind(undefined),children:/*#__PURE__*/(0,jsx_runtime.jsxs)("p",{children:[/*#__PURE__*/(0,jsx_runtime.jsx)(PseudoContentButton/* default */.A,{className:"pseudo-text--applied button mt1",children:"Apply"}),importedDictionariesLoading?/*#__PURE__*/(0,jsx_runtime.jsx)("span",{className:"dib ml2",children:"Applying"}):null,importedDictionariesLoaded?/*#__PURE__*/(0,jsx_runtime.jsx)("span",{className:"dib ml2",children:"Applied!"}):null]})})]})})}),/*#__PURE__*/(0,jsx_runtime.jsx)("div",{className:"bg-info dark:bg-coolgrey-1100 landing-page-section",children:/*#__PURE__*/(0,jsx_runtime.jsx)("div",{className:"p3 mx-auto mw-1024",children:/*#__PURE__*/(0,jsx_runtime.jsxs)("div",{className:"flex flex-wrap",children:[/*#__PURE__*/(0,jsx_runtime.jsxs)("div",{className:"mw-568 mr3 flex-grow",children:[/*#__PURE__*/(0,jsx_runtime.jsx)("h3",{children:"Your dictionaries"}),showYourDictionaries,showDictionaryErrors,misstrokesBlurb,showYourConfig,showConfigErrors,/*#__PURE__*/(0,jsx_runtime.jsx)("form",{className:"mt3 mb3",onSubmit:handleOnSubmitClear.bind(undefined),children:/*#__PURE__*/(0,jsx_runtime.jsx)("div",{children:/*#__PURE__*/(0,jsx_runtime.jsx)("button",{type:"submit",className:"button button--danger mt1",children:"Clear dictionaries and config"})})})]}),/*#__PURE__*/(0,jsx_runtime.jsxs)("div",{className:"mw-384 w-336",children:[/*#__PURE__*/(0,jsx_runtime.jsx)("h3",{children:"Add files"}),/*#__PURE__*/(0,jsx_runtime.jsxs)("form",{className:"mb3",onSubmit:handleOnSubmit.bind(undefined),children:[/*#__PURE__*/(0,jsx_runtime.jsxs)("div",{className:"dib",children:[/*#__PURE__*/(0,jsx_runtime.jsx)("label",{className:"mb1",htmlFor:"dictionariesFileInput",children:"Add dictionaries in JSON format"}),/*#__PURE__*/(0,jsx_runtime.jsx)("p",{className:"text-small mb1",children:"You can add one dictionary after another using this form."}),/*#__PURE__*/(0,jsx_runtime.jsx)("input",{type:"file",id:"dictionariesFileInput",name:"dictionary",className:"form-control",multiple:true})]}),/*#__PURE__*/(0,jsx_runtime.jsx)("div",{children:/*#__PURE__*/(0,jsx_runtime.jsx)("button",{type:"submit",className:"button mt1",children:"Add dictionaries"})})]}),/*#__PURE__*/(0,jsx_runtime.jsxs)("form",{className:"mb3",onSubmit:handleOnSubmitConfig.bind(undefined),children:[/*#__PURE__*/(0,jsx_runtime.jsxs)("div",{className:"dib",children:[/*#__PURE__*/(0,jsx_runtime.jsx)("label",{className:"mb1",htmlFor:"dictionaryConfigFileInput",children:"Add config"}),/*#__PURE__*/(0,jsx_runtime.jsx)("input",{type:"file",id:"dictionaryConfigFileInput",name:"dictionaryConfig",className:"form-control",multiple:true})]}),/*#__PURE__*/(0,jsx_runtime.jsx)("div",{children:/*#__PURE__*/(0,jsx_runtime.jsx)("button",{type:"submit",className:"button mt1",children:"Add config"})})]})]})]})})})]})});};/* harmony default export */ const dictionaries_DictionaryManagement = (DictionaryManagement);

/***/ })

}]);
//# sourceMappingURL=647.bcfe5faa.chunk.js.map