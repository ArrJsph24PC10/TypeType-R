{"version":3,"file":"static/js/690.b6dbbc2c.chunk.js","mappings":"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","sources":["pages/lessons/components/UserSettings/updateGlobalUserSetting.js","pages/writer/Writer.tsx"],"sourcesContent":["import GoogleAnalytics from \"react-ga4\";\nimport { useSetAtom } from \"jotai\";\nimport {\n  backupBannerDismissedTime,\n  experimentsState,\n  inputForKAOESState,\n  writerInputState\n} from \"../../../../states/globalUserSettingsState\";\n\n// (event: SyntheticInputEvent<HTMLInputElement>) => void\nexport function useChangeWriterInput() {\n  const setState = useSetAtom(writerInputState);\n  return (event) => {\n    let name = \"BAD_INPUT\";\n\n    if (event && event.target && event.target.name) {\n      setState(event.target.name);\n      name = event.target.name;\n    }\n\n    let labelString = name;\n    if (!name) {\n      labelString = \"BAD_INPUT\";\n    }\n\n    GoogleAnalytics.event({\n      category: \"Global user settings\",\n      action: \"Change writer input\",\n      label: labelString,\n    });\n  }\n}\n\nexport function useChangeInputForKAOES() {\n  const setState = useSetAtom(inputForKAOESState);\n  return (event) => {\n    let name = \"BAD_INPUT\";\n\n    if (event && event.target && event.target.name) {\n      setState(event.target.name);\n      name = event.target.name;\n    }\n\n    let labelString = name;\n    if (!name) {\n      labelString = \"BAD_INPUT\";\n    }\n\n    GoogleAnalytics.event({\n      category: \"Global user settings\",\n      action: \"Change input for KAOES\",\n      label: labelString,\n    });\n  }\n}\n\nexport function useToggleExperiment() {\n  const setState = useSetAtom(experimentsState);\n  return (event) => {\n    const target = event.target;\n    const value = target.checked;\n    const name = target.name;\n\n    setState(name, value);\n\n    let labelString = value;\n    if (value === undefined) {\n      labelString = \"BAD_INPUT\";\n    } else {\n      labelString.toString();\n    }\n\n    GoogleAnalytics.event({\n      category: \"Global user settings\",\n      action: \"Change \" + name,\n      label: labelString,\n    });\n  }\n}\n\nexport function useDismissBackupBanner() {\n  const setState = useSetAtom(backupBannerDismissedTime);\n  return () => {\n    setState(Date.now());\n\n    let labelString = \"Dismiss\";\n\n    GoogleAnalytics.event({\n      category: \"Global user settings\",\n      action: \"Dismiss backup banner\",\n      label: labelString,\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport GoogleAnalytics from \"react-ga4\";\nimport AmericanStenoDiagram from '../../StenoLayout/AmericanStenoDiagram';\nimport NoNumberBarInnerThumbNumbersStenoDiagram from '../../StenoLayout/NoNumberBarInnerThumbNumbersStenoDiagram';\nimport NoNumberBarOuterThumbNumbersStenoDiagram from '../../StenoLayout/NoNumberBarOuterThumbNumbersStenoDiagram';\nimport YaweiChineseStenoDiagram from '../../StenoLayout/YaweiChineseStenoDiagram';\nimport BrazilianPortugueseStenoDiagram from '../../StenoLayout/BrazilianPortugueseStenoDiagram';\nimport DanishStenoDiagram from '../../StenoLayout/DanishStenoDiagram';\nimport ItalianMichelaStenoDiagram from '../../StenoLayout/ItalianMichelaStenoDiagram';\nimport JapaneseStenoDiagram from '../../StenoLayout/JapaneseStenoDiagram';\nimport KoreanModernCStenoDiagram from '../../StenoLayout/KoreanModernCStenoDiagram';\nimport PalantypeDiagram from '../../StenoLayout/PalantypeDiagram';\nimport Stroke from '../../utils/stroke';\nimport {\n  mapQWERTYKeysToStenoStroke,\n} from '../../utils/typey-type';\nimport mapBriefToAmericanStenoKeys from '../../utils/stenoLayouts/mapBriefToAmericanStenoKeys';\nimport mapBriefToNoNumberBarInnerThumbNumbersStenoKeys from '../../utils/stenoLayouts/mapBriefToNoNumberBarInnerThumbNumbersStenoKeys';\nimport mapBriefToNoNumberBarOuterThumbNumbersStenoKeys from '../../utils/stenoLayouts/mapBriefToNoNumberBarOuterThumbNumbersStenoKeys';\nimport mapBriefToYaweiChineseStenoKeys from '../../utils/stenoLayouts/mapBriefToYaweiChineseStenoKeys';\nimport mapBriefToBrazilianPortugueseStenoKeys from '../../utils/stenoLayouts/mapBriefToBrazilianPortugueseStenoKeys';\nimport mapBriefToDanishStenoKeys from '../../utils/stenoLayouts/mapBriefToDanishStenoKeys';\nimport mapBriefToItalianMichelaStenoKeys from '../../utils/stenoLayouts/mapBriefToItalianMichelaStenoKeys';\nimport mapBriefToJapaneseStenoKeys from '../../utils/stenoLayouts/mapBriefToJapaneseStenoKeys';\nimport mapBriefToKoreanModernCStenoKeys from '../../utils/stenoLayouts/mapBriefToKoreanModernCStenoKeys';\nimport mapBriefToPalantypeKeys from '../../utils/stenoLayouts/mapBriefToPalantypeKeys';\nimport { fetchResource } from '../../utils/getData';\nimport Subheader from \"../../components/Subheader\";\n\nimport type { GlobalUserSettings, Outline, UserSettings } from \"../../types\";\nimport { WithAppMethods, withAppMethods } from \"../../states/legacy/AppMethodsContext\";\nimport { userSettingsState } from \"../../states/userSettingsState\";\nimport { withAtomsCompat } from \"../../states/atomUtils\";\nimport { useChangeStenoLayout } from \"../lessons/components/UserSettings/updateUserSetting\";\nimport { globalUserSettingsState } from \"../../states/globalUserSettingsState\";\nimport { useChangeWriterInput } from \"../lessons/components/UserSettings/updateGlobalUserSetting\";\n\ntype Props = {\n  userSettings: UserSettings,\n  globalUserSettings: GlobalUserSettings,\n};\n\ntype State = {\n  stenoBrief: Outline,\n  stenoStroke: Stroke,\n  stenoDictionary: any,\n  writtenText: string,\n  valueRawSteno: string,\n  valueQWERTYSteno: string\n};\n\ntype StenoLayout = {\n  [keyName: string]: boolean\n}\n\ntype MapBriefToKeys = (brief: Outline) => StenoLayout\n\nclass Writer extends Component<WithAppMethods<Props & {changeStenoLayout: ReturnType<typeof useChangeStenoLayout>, changeWriterInput: ReturnType<typeof useChangeWriterInput>}>, State> {\n  state: State = {\n    stenoBrief: '',\n    stenoStroke: new Stroke(),\n    stenoDictionary: {},\n    writtenText: '',\n    valueRawSteno: '',\n    valueQWERTYSteno: ''\n  }\n\n  updateRawSteno(event: any) {\n    let currentValue: string;\n\n    if (event && event.target && event.target.value) {\n      currentValue = event.target.value;\n    }\n    else {\n      currentValue = '';\n    }\n\n    if (currentValue === ' ') {\n      // sends clicked diagram keys\n      this.sendStroke(this.state.stenoBrief);\n      currentValue = '';\n    }\n    else if (currentValue.includes(' ')) {\n      currentValue = currentValue.trim();\n      this.sendStroke(currentValue);\n      currentValue = '';\n    }\n\n    this.setState({\n      stenoBrief: currentValue,\n      valueRawSteno: currentValue\n    });\n  }\n\n  updateQWERTYSteno(event: any) {\n    let currentValue: string;\n\n    if (event && event.target && event.target.value) {\n      currentValue = event.target.value;\n    }\n    else {\n      currentValue = '';\n    }\n\n    if (currentValue === ' ') {\n      // sends clicked diagram keys\n      this.sendStroke(this.state.stenoBrief);\n      currentValue = '';\n    }\n    else if (currentValue.includes(' ')) {\n      currentValue = currentValue.trim();\n      let stenoBrief = this.updateBrief(currentValue);\n      this.sendStroke(stenoBrief);\n      currentValue = '';\n    }\n    else {\n      this.updateBrief(currentValue);\n    }\n    this.setState({valueQWERTYSteno: currentValue});\n  }\n\n  componentDidMount() {\n    let dict:string = '' + (process.env.PUBLIC_URL || '') + '/dictionaries/typey-type/typey-type.json';\n    fetchResource(dict)\n      .then((json) => {\n        this.setState({\n          stenoDictionary: json\n        });\n      })\n      .catch((e) => console.error(e));\n\n    // @ts-ignore\n    if (this.mainHeading) {\n      // @ts-ignore\n      this.mainHeading.focus();\n    }\n  }\n\n  downloadDiagramSVG(e: any) {\n    // First version of this:\n    let svgFileName = \"typey-type-\" + this.props.userSettings.stenoLayout.replace('stenoLayout','') + '-' + (this.state.stenoBrief || 'no-brief') + \".svg\";\n\n    GoogleAnalytics.event({\n      category: 'Downloads',\n      action: 'Click',\n      label: svgFileName || '',\n    });\n\n    let downloadDiagramSVG;\n    let svg:HTMLElement | null = document.getElementById(\"stenoDiagram\");\n    if (svg) {\n      let svgHTML = svg.outerHTML;\n      if (Blob !== undefined) {\n        let blob = new Blob([svgHTML], {type: \"image/svg+xml\"});\n        downloadDiagramSVG = URL.createObjectURL(blob);\n      }\n      else {\n        downloadDiagramSVG = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(svgHTML);\n      }\n    }\n    else {\n      downloadDiagramSVG = null;\n    }\n\n    // @ts-ignore\n    if (this.downloadLink && downloadDiagramSVG) {\n      // @ts-ignore\n      this.downloadLink.href = downloadDiagramSVG;\n    }\n  }\n\n  sendStroke(stenoBrief: Outline) {\n    let writtenText = this.lookUpStrokeInDictionary(stenoBrief);\n\n    let labelString = this.state.stenoBrief;\n    if (!labelString) { labelString = \"BAD_INPUT\"; }\n\n    GoogleAnalytics.event({\n      category: \"Writer\",\n      action: \"Send stroke\",\n      label: labelString,\n    });\n\n    this.setState({\n      stenoBrief: '',\n      stenoStroke: new Stroke(),\n      valueQWERTYSteno: '',\n      valueRawSteno: '',\n      writtenText: writtenText\n    });\n  }\n\n  sendDiagramStroke() {\n    this.sendStroke(this.state.stenoBrief);\n  }\n\n  lookUpStrokeInDictionary(stenoBrief: Outline) {\n    let translation = stenoBrief;\n    if (this.state.stenoDictionary[stenoBrief]) {\n      translation = this.state.stenoDictionary[stenoBrief];\n    }\n    return translation;\n  }\n\n  updateBrief(typedText: string) {\n    // TODO: let strokes = splitBriefsIntoStrokes(typedText);\n    let stenoStroke = mapQWERTYKeysToStenoStroke(typedText, this.props.userSettings.stenoLayout);\n\n    this.setState({\n      stenoBrief: stenoStroke.toString(),\n      stenoStroke: stenoStroke\n    });\n    return stenoStroke.toString();\n  }\n\n  addKeyToStenoBrief(key: number) {\n    let stenoStroke = this.state.stenoStroke.set(key);\n\n    this.setState({\n      stenoBrief: stenoStroke.toString(),\n      stenoStroke: stenoStroke,\n      valueQWERTYSteno: '',\n      valueRawSteno: ''\n    });\n  }\n\n  render() {\n\n    let mapBriefsFunction: MapBriefToKeys = mapBriefToAmericanStenoKeys;\n    let StenoLayoutDiagram: any = AmericanStenoDiagram;\n    let placeholderRawSteno = \"e.g. HEU\";\n    switch (this.props.userSettings.stenoLayout) {\n      case 'stenoLayoutAmericanSteno':\n        mapBriefsFunction = mapBriefToAmericanStenoKeys;\n        StenoLayoutDiagram = AmericanStenoDiagram;\n        placeholderRawSteno = \"e.g. HEU\";\n        break;\n      case 'stenoLayoutNoNumberBarInnerThumbNumbers':\n        mapBriefsFunction = mapBriefToNoNumberBarInnerThumbNumbersStenoKeys;\n        StenoLayoutDiagram = NoNumberBarInnerThumbNumbersStenoDiagram;\n        placeholderRawSteno = \"e.g. HEU\";\n        break;\n      case 'stenoLayoutNoNumberBarOuterThumbNumbers':\n        mapBriefsFunction = mapBriefToNoNumberBarOuterThumbNumbersStenoKeys;\n        StenoLayoutDiagram = NoNumberBarOuterThumbNumbersStenoDiagram;\n        placeholderRawSteno = \"e.g. HEU\";\n        break;\n      case 'stenoLayoutBrazilianPortugueseSteno':\n        mapBriefsFunction = mapBriefToBrazilianPortugueseStenoKeys;\n        StenoLayoutDiagram = BrazilianPortugueseStenoDiagram;\n        placeholderRawSteno = \"e.g. #SKTFPLRAO*EURWBPGHTSDZ\";\n        break;\n      case 'stenoLayoutYaweiChineseSteno':\n        mapBriefsFunction = mapBriefToYaweiChineseStenoKeys;\n        StenoLayoutDiagram = YaweiChineseStenoDiagram;\n        placeholderRawSteno = \"e.g. #XBDZGWIUNEAO-#XBDZGWIUNEAO\";\n        break;\n      case 'stenoLayoutDanishSteno':\n        mapBriefsFunction = mapBriefToDanishStenoKeys;\n        StenoLayoutDiagram = DanishStenoDiagram;\n        placeholderRawSteno = \"e.g. #STKPVHRAO*ÆÅFRPELKTSDDN\";\n        break;\n      case 'stenoLayoutItalianMichelaSteno':\n        mapBriefsFunction = mapBriefToItalianMichelaStenoKeys;\n        StenoLayoutDiagram = ItalianMichelaStenoDiagram;\n        placeholderRawSteno = \"e.g. FSCZPNRXIUuieanpzcsf\";\n        break;\n      case 'stenoLayoutJapaneseSteno':\n        mapBriefsFunction = mapBriefToJapaneseStenoKeys;\n        StenoLayoutDiagram = JapaneseStenoDiagram;\n        placeholderRawSteno = \"e.g. 漢「4たな3かさ2いう1おっ*4たな3かさ2いう1おっ」カ\";\n        break;\n      case 'stenoLayoutKoreanModernCSteno':\n        mapBriefsFunction = mapBriefToKoreanModernCStenoKeys;\n        StenoLayoutDiagram = KoreanModernCStenoDiagram;\n        placeholderRawSteno = \"e.g. 12345ㅎㅁㄱㅈㄴㄷㅇㅅㅂㄹㅗㅏㅜ*ㅓㅣ67890ㅎㅇㄹㄱㄷㅂㄴㅅㅈㅁ\";\n        break;\n      case 'stenoLayoutPalantype':\n        mapBriefsFunction = mapBriefToPalantypeKeys;\n        StenoLayoutDiagram = PalantypeDiagram;\n        placeholderRawSteno = \"e.g. SCPTH+MFRNLYOEAUI^NLCMFRPT+SH\";\n        break;\n      default:\n        mapBriefsFunction = mapBriefToAmericanStenoKeys;\n        StenoLayoutDiagram = AmericanStenoDiagram;\n        placeholderRawSteno = \"e.g. HEU\";\n        break;\n    }\n\n    let downloadDiagramSVG = null;\n\n    let svg = document.getElementById(\"stenoDiagram\");\n    if (svg) {\n      downloadDiagramSVG = \"#\";\n    }\n\n    // Second version of this:\n    let svgFileName = \"typey-type-\" + this.props.userSettings.stenoLayout.replace('stenoLayout','') + '-' + (this.state.stenoBrief || 'no-brief') + \".svg\";\n\n    return (\n      <main id=\"main\">\n        <Subheader>\n          <div className=\"flex mr1 self-center\">\n            <header className=\"flex items-center min-h-40\">\n              {/* @ts-ignore */}\n              <h2 ref={(heading) => { this.mainHeading = heading; }} tabIndex={-1} id=\"writer\">Writer</h2>\n            </header>\n          </div>\n          <div className=\"flex mxn2\">\n            {/* @ts-ignore */}\n            {downloadDiagramSVG ? <a href={downloadDiagramSVG} ref={(downloadLink) => { this.downloadLink = downloadLink; }} download={svgFileName} onClick={this.downloadDiagramSVG.bind(this)} className=\"link-button link-button-ghost table-cell mr1\">Download diagram (SVG)</a>\n              :\n              null\n            }\n          </div>\n        </Subheader>\n        <div className=\"p3 mx-auto mw-1024\">\n          <div className=\"flex flex-wrap justify-between\">\n            <div className=\"mw-568\">\n              <p className=\"mw-448 h3 mr3 wrap text-center\">\n                {/* The trailing zero-width space ensures this area is always filled */}\n                <span className=\"visually-hidden\">Your written text: </span>{this.state.writtenText}&#8203;\n              </p>\n              <div className=\"mt4\">\n                <StenoLayoutDiagram classes=\"steno-diagram-svg mw100\" id=\"stenoDiagram\" {...mapBriefsFunction(this.state.stenoBrief)} handleOnClick={this.addKeyToStenoBrief.bind(this)} brief={this.state.stenoBrief} diagramWidth=\"440\" />\n              </div>\n              <p className=\"text-center mr4 mt1\">\n                <button onClick={this.sendDiagramStroke.bind(this)} className=\"button text-center\">Send stroke</button>\n              </p>\n            </div>\n            <div className=\"mw-384 w-336\">\n              <h3>Settings</h3>\n              <div className=\"flex flex-wrap\">\n                { this.props.userSettings.stenoLayout === \"stenoLayoutAmericanSteno\" && this.props.globalUserSettings.writerInput === \"qwerty\" ?\n                  <p className=\"mt1 mb2 mr1\">\n                    <label htmlFor=\"qwertyStenoInput\" className=\"db mb1\">\n                      QWERTY steno input\n                    </label>\n                    <input\n                      id=\"qwertyStenoInput\"\n                      aria-describedby=\"qwerty-type-space-to-send\"\n                      autoCapitalize=\"off\"\n                      autoComplete=\"off\"\n                      autoCorrect=\"off\"\n                      className=\"input-textarea overflow-hidden\"\n                      onChange={this.updateQWERTYSteno.bind(this)}\n                      placeholder=\"e.g. rnm\"\n                      value={this.state.valueQWERTYSteno}\n                    />\n                    <span id=\"qwerty-type-space-to-send\" className=\"text-small\">Type a space to send the stroke</span>\n                  </p>\n                  :\n                  null\n                }\n                { this.props.globalUserSettings.writerInput === \"raw\" || !(this.props.userSettings.stenoLayout === \"stenoLayoutAmericanSteno\") ?\n                  <p className=\"mt1 mb2 mr1\">\n                    <label htmlFor=\"rawStenoInput\" className=\"db mb1\">\n                      Raw steno input\n                    </label>\n                    <input\n                      id=\"rawStenoInput\"\n                      aria-describedby=\"raw-type-space-to-send\"\n                      autoCapitalize=\"off\"\n                      autoComplete=\"off\"\n                      autoCorrect=\"off\"\n                      className=\"input-textarea overflow-hidden\"\n                      onChange={this.updateRawSteno.bind(this)}\n                      placeholder={placeholderRawSteno}\n                      value={this.state.valueRawSteno}\n                    />\n                    <span id=\"raw-type-space-to-send\" className=\"text-small\">Type a space to send the stroke</span>\n                  </p>\n                  :\n                  null\n                }\n              </div>\n              <div className=\"mb2 mw-240\">\n                <label className=\"mb1 db\" htmlFor=\"stenoLayout\">Steno layout</label>\n                <select id=\"stenoLayout\" name=\"writerStenoLayout\" value={this.props.userSettings.stenoLayout} onChange={this.props.changeStenoLayout} className=\"text-small form-control w6\">\n                  <option value=\"stenoLayoutAmericanSteno\">Ward Stone Ireland (Plover, EcoSteno, SOFT/HRUF etc.)</option>\n                  <option value=\"stenoLayoutNoNumberBarInnerThumbNumbers\">Inner thumbers (TinyMod, Steko, etc.)</option>\n                  <option value=\"stenoLayoutNoNumberBarOuterThumbNumbers\">Outer thumbers (Uni, Georgi, etc.)</option>\n                  <option value=\"stenoLayoutPalantype\">Palantype</option>\n                  <option value=\"stenoLayoutBrazilianPortugueseSteno\">Brazilian Portuguese steno</option>\n                  <option value=\"stenoLayoutYaweiChineseSteno\">Chinese Yawei steno</option>\n                  <option value=\"stenoLayoutDanishSteno\">Danish steno</option>\n                  <option value=\"stenoLayoutItalianMichelaSteno\">Italian Michela steno</option>\n                  <option value=\"stenoLayoutJapaneseSteno\">Japanese steno</option>\n                  <option value=\"stenoLayoutKoreanModernCSteno\">Korean Modern C steno</option>\n                </select>\n              </div>\n              { this.props.userSettings.stenoLayout === \"stenoLayoutAmericanSteno\" ?\n                <fieldset>\n                  <legend>Raw or QWERTY steno input</legend>\n                  <div className=\"flex\">\n                    <div className=\"flex flex-wrap justify-between\">\n                      <p className=\"radio mr3\">\n                        <label htmlFor=\"raw\" className=\"mb1\">\n                          <input type=\"radio\" name=\"raw\" id=\"raw\" onChange={this.props.changeWriterInput} checked={this.props.globalUserSettings.writerInput === \"raw\"} /> Raw\n                        </label>\n                      </p>\n                    </div>\n                    <div className=\"flex flex-wrap justify-between\">\n                      <p className=\"radio mr3\">\n                        <label htmlFor=\"qwerty\" className=\"mb1\">\n                          <input type=\"radio\" name=\"qwerty\" id=\"qwerty\" onChange={this.props.changeWriterInput} checked={this.props.globalUserSettings.writerInput === \"qwerty\"} /> QWERTY\n                        </label>\n                      </p>\n                    </div>\n                  </div>\n                </fieldset>\n                :\n                  <p className=\"text-small\">Note: clicking on the diagram only works for the Ward Stone Ireland (Plover, EcoSteno, SOFT/HRUF etc.) layout at this time.</p>\n              }\n            </div>\n          </div>\n        </div>\n      </main>\n    )\n  }\n}\n\nfunction WriterWrapper(props: WithAppMethods<Props>) {\n  const changeStenoLayout = useChangeStenoLayout()\n  const changeWriterInput = useChangeWriterInput()\n  return <Writer {...props} {...{changeStenoLayout, changeWriterInput}} />;\n}\n\nexport default withAppMethods(withAtomsCompat(WriterWrapper, [\n  [\"userSettings\", userSettingsState],\n  [\"globalUserSettings\", globalUserSettingsState]\n]));\n"],"names":["useChangeWriterInput","setState","useSetAtom","writerInputState","event","name","target","labelString","GoogleAnalytics","category","action","label","useChangeInputForKAOES","inputForKAOESState","useToggleExperiment","experimentsState","value","checked","undefined","toString","useDismissBackupBanner","backupBannerDismissedTime","Date","now","Writer","Component","constructor","arguments","state","stenoBrief","stenoStroke","Stroke","stenoDictionary","writtenText","valueRawSteno","valueQWERTYSteno","updateRawSteno","currentValue","this","sendStroke","includes","trim","updateQWERTYSteno","updateBrief","componentDidMount","fetchResource","then","json","catch","e","console","error","mainHeading","focus","downloadDiagramSVG","svgFileName","props","userSettings","stenoLayout","replace","svg","document","getElementById","svgHTML","outerHTML","Blob","blob","type","URL","createObjectURL","encodeURIComponent","downloadLink","href","lookUpStrokeInDictionary","sendDiagramStroke","translation","typedText","mapQWERTYKeysToStenoStroke","addKeyToStenoBrief","key","set","render","mapBriefsFunction","mapBriefToAmericanStenoKeys","StenoLayoutDiagram","AmericanStenoDiagram","placeholderRawSteno","mapBriefToNoNumberBarInnerThumbNumbersStenoKeys","NoNumberBarInnerThumbNumbersStenoDiagram","mapBriefToNoNumberBarOuterThumbNumbersStenoKeys","NoNumberBarOuterThumbNumbersStenoDiagram","mapBriefToBrazilianPortugueseStenoKeys","BrazilianPortugueseStenoDiagram","mapBriefToYaweiChineseStenoKeys","YaweiChineseStenoDiagram","mapBriefToDanishStenoKeys","DanishStenoDiagram","mapBriefToItalianMichelaStenoKeys","ItalianMichelaStenoDiagram","mapBriefToJapaneseStenoKeys","JapaneseStenoDiagram","mapBriefToKoreanModernCStenoKeys","KoreanModernCStenoDiagram","mapBriefToPalantypeKeys","PalantypeDiagram","_jsxs","id","children","Subheader","_jsx","className","ref","heading","tabIndex","download","onClick","bind","classes","handleOnClick","brief","diagramWidth","globalUserSettings","writerInput","htmlFor","autoCapitalize","autoComplete","autoCorrect","onChange","placeholder","changeStenoLayout","changeWriterInput","withAppMethods","withAtomsCompat","useChangeStenoLayout","userSettingsState","globalUserSettingsState"],"sourceRoot":""}