{"version":3,"file":"static/js/834.4a0a6aad.chunk.js","mappings":"2LAKA,MAQMA,EAAiBC,IACrB,MAAMC,EAAmBC,KAAKC,MAAMH,EAAmB,IAEvD,MAAO,GAAGC,KAXaG,KACvB,IAAIC,EAAuBC,OAAOF,GAClC,KAAOC,EAAqBE,OAAS,GACnCF,EAAuB,IAAMA,EAE/B,OAAOA,CAAoB,EAMGG,CADLN,KAAKC,MAAMH,EAAsC,GAAnBC,KACU,EAgGnE,EA3FcQ,KACZ,MAAOT,EAAkBU,IAAuBC,EAAAA,EAAAA,UAH1B,KAIhBC,GAAcC,EAAAA,EAAAA,QAAY,MAC1BC,GAAcD,EAAAA,EAAAA,QAA2B,MACzCE,GAAmBF,EAAAA,EAAAA,QAA2B,MAE9CG,EAAchB,GAAoB,GAExCiB,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAaC,KAAKC,MAAQC,IAchC,OAZAT,EAAYU,QAAUC,aAAY,KAChC,MAAMH,EAAMD,KAAKC,MACXI,GAA0BN,EAAaE,GAAO,IAC9CK,EAAiBvB,KAAKwB,MAAMF,GAE9BA,GAA0B,GAAKZ,EAAYU,SAC7CK,cAAcf,EAAYU,SAG5BZ,EAAoBe,EAAe,GAClC,KAEI,KACDb,EAAYU,SACdK,cAAcf,EAAYU,QAC5B,CACD,GACA,KAEHL,EAAAA,EAAAA,YAAU,KAAO,IAADW,EACK,QAAnBA,EAAAd,EAAYQ,eAAO,IAAAM,GAAnBA,EAAqBC,OAAO,GAC3B,KAEHZ,EAAAA,EAAAA,YAAU,KACU,IAADa,EAAbd,IACsB,QAAxBc,EAAAf,EAAiBO,eAAO,IAAAQ,GAAxBA,EAA0BD,QAC5B,GACC,CAACb,IAUJ,OACEe,EAAAA,EAAAA,MAAA,QAAMC,GAAG,OAAMC,SAAA,EACbC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAAAF,UACRC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,uBAAsBH,UACnCC,EAAAA,EAAAA,KAAA,UAAQE,UAAU,6BAA4BH,UAC5CC,EAAAA,EAAAA,KAAA,MAAIG,IAAKvB,EAAawB,UAAW,EAAGN,GAAG,eAAcC,SAAC,wBAM5DC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,qBAAoBH,UACjCF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,iBAAgBH,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAIG,IAAKtB,EAAkBuB,UAAW,EAAGF,UAAU,kBAAiBH,SACjEjB,EAAc,qBAAuB,2BAExCkB,EAAAA,EAAAA,KAAA,KAAGE,UAAU,sBAAqBH,SAAC,wHAInCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mDAAkDH,UAC/DC,EAAAA,EAAAA,KAAA,QAAM,YAAU,SAAS,cAAY,OAAMD,SACxClC,EAAcC,OAGlBgB,IACCkB,EAAAA,EAAAA,KAAA,KAAGE,UAAU,cAAaH,UACxBC,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CACHC,GAAG,YACHC,QArCSC,KACrBC,EAAAA,GAAgBC,MAAM,CACpBC,SAAU,QACVC,OAAQ,QACRC,MAAO,mBACP,EAiCUX,UAAU,kBACVY,MAAO,CAAEC,WAAY,GAAIhB,SAC1B,6BAOJ,C","sources":["pages/break/Break.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport GoogleAnalytics from \"react-ga4\";\nimport Subheader from \"../../components/Subheader\";\n\nconst addLeadingZeros = (value: number): string => {\n  let textWithLeadingZeros = String(value);\n  while (textWithLeadingZeros.length < 2) {\n    textWithLeadingZeros = \"0\" + textWithLeadingZeros;\n  }\n  return textWithLeadingZeros;\n};\n\nconst timeToDisplay = (remainingSeconds: number) => {\n  const breakTimeMinutes = Math.floor(remainingSeconds / 60);\n  const breakTimeSeconds = Math.floor(remainingSeconds - breakTimeMinutes * 60);\n  return `${breakTimeMinutes}:${addLeadingZeros(breakTimeSeconds)}`;\n};\n\nconst durationSeconds = 5 * 60;\n\nconst Break = () => {\n  const [remainingSeconds, setRemainingSeconds] = useState(durationSeconds);\n  const intervalRef = useRef<any>(null);\n  const mainHeading = useRef<HTMLHeadingElement>(null);\n  const breakDoneHeading = useRef<HTMLHeadingElement>(null);\n\n  const isBreakDone = remainingSeconds <= 0;\n\n  useEffect(() => {\n    const finishTime = Date.now() + durationSeconds * 1000;\n\n    intervalRef.current = setInterval(() => {\n      const now = Date.now();\n      const approxSecondsRemaining = (finishTime - now) / 1000;\n      const roundedSeconds = Math.round(approxSecondsRemaining);\n\n      if (approxSecondsRemaining <= 0 && intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n\n      setRemainingSeconds(roundedSeconds);\n    }, 500);\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    mainHeading.current?.focus();\n  }, []);\n\n  useEffect(() => {\n    if (isBreakDone) {\n      breakDoneHeading.current?.focus();\n    }\n  }, [isBreakDone]);\n\n  const reviewProgress = () => {\n    GoogleAnalytics.event({\n      category: \"Break\",\n      action: \"Click\",\n      label: \"Review progress\",\n    });\n  };\n\n  return (\n    <main id=\"main\">\n      <Subheader>\n        <div className=\"flex mr1 self-center\">\n          <header className=\"flex items-center min-h-40\">\n            <h2 ref={mainHeading} tabIndex={-1} id=\"take-a-break\">\n              Take a break\n            </h2>\n          </header>\n        </div>\n      </Subheader>\n      <div className=\"p3 mx-auto mw-1024\">\n        <div className=\"mx-auto mw-568\">\n          <h2 ref={breakDoneHeading} tabIndex={-1} className=\"text-center mt3\">\n            {isBreakDone ? \"Your break is done\" : \"Your break starts now\"}\n          </h2>\n          <p className=\"mt3 text-center mb3\">\n            Rest your hands and your mind. Take a 5-minute break and continue or\n            come back in 4+&nbsp;hours for another session.\n          </p>\n          <div className=\"text-center mb3 stat__number stat__number--min-w\">\n            <span aria-live=\"polite\" aria-atomic=\"true\">\n              {timeToDisplay(remainingSeconds)}\n            </span>\n          </div>\n          {isBreakDone && (\n            <p className=\"text-center\">\n              <Link\n                to=\"/progress\"\n                onClick={reviewProgress}\n                className=\"link-button dib\"\n                style={{ lineHeight: 2 }}\n              >\n                Review progress\n              </Link>\n            </p>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Break;\n"],"names":["timeToDisplay","remainingSeconds","breakTimeMinutes","Math","floor","value","textWithLeadingZeros","String","length","addLeadingZeros","Break","setRemainingSeconds","useState","intervalRef","useRef","mainHeading","breakDoneHeading","isBreakDone","useEffect","finishTime","Date","now","durationSeconds","current","setInterval","approxSecondsRemaining","roundedSeconds","round","clearInterval","_mainHeading$current","focus","_breakDoneHeading$cur","_jsxs","id","children","_jsx","Subheader","className","ref","tabIndex","Link","to","onClick","reviewProgress","GoogleAnalytics","event","category","action","label","style","lineHeight"],"sourceRoot":""}